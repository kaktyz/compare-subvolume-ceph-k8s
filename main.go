package main

import (
	"bufio"
	"context"
	"encoding/json"
	"flag"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"
	"time"

	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/tools/clientcmd"
	"k8s.io/client-go/util/homedir"
)

var subvolumeNames []string

var pvFromKubeArr []string

var LOG_LEVEL = getEnv("LOG_LEVEL", "INFO")
var KUBE_CONFIG_FILE_PATH = os.Getenv("KUBE_CONFIG_FILE_PATH")

// LogEntry logs in json mod
type LogEntry struct {
	Timestamp string `json:"timestamp"`
	Message   string `json:"message"`
}

// getEnv take default value if env not exist
func getEnv(key, defaultValue string) string {
	if value, exists := os.LookupEnv(key); exists {
		return value
	}
	logWithTime(fmt.Sprintf("Couldn't find external var %s. Use %s by default.ü¶Ñ", key, defaultValue))
	return defaultValue
}

func logWithTime(message string) {
	entry := LogEntry{
		Timestamp: time.Now().Format(time.RFC3339),
		Message:   message,
	}
	jsonData, err := json.Marshal(entry)
	if err != nil {
		log.Fatalf("Failed to marshal log entry to JSON: %v", err)
		return
	}

	fmt.Println(string(jsonData))
}

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞
	// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
	filePath := "subvolumeListFronCeph.txt"

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–º–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞
	err := loadSubvolumeNamesFromFile(filePath)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞: %v", err)
		return
	}

	// –í—ã–≤–æ–¥–∏–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
	if LOG_LEVEL == "DEBUG" {
		logWithTime(fmt.Sprintf("Array from file: %+v", subvolumeNames))
	}

	var kubeconfig *string

	if KUBE_CONFIG_FILE_PATH == "" {
		// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω–∞
		fmt.Println("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω–∞. –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
		if home := homedir.HomeDir(); home != "" {
			kubeconfig = flag.String("kubeconfig", filepath.Join(home, ".kube", "config"), "(optional) absolute path to the kubeconfig file")
		} else {
			kubeconfig = flag.String("kubeconfig", "", "absolute path to the kubeconfig file")
		}
		flag.Parse()
	} else {
		// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∞
		fmt.Printf("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∞: %s\n", KUBE_CONFIG_FILE_PATH)

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è kubeconfig

		defaultKubeConfigPath := KUBE_CONFIG_FILE_PATH

		// –£–∫–∞–∑—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
		kubeconfig = flag.String("kubeconfig", defaultKubeConfigPath, "(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–æ kubeconfig —Ñ–∞–π–ª–∞")

		flag.Parse()

	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
	config, err := clientcmd.BuildConfigFromFlags("", *kubeconfig)
	if err != nil {
		log.Fatalf("Error building kubeconfig: %v", err)
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è Kubernetes
	clientset, err := kubernetes.NewForConfig(config)
	if err != nil {
		log.Fatalf("Error creating Kubernetes client: %v", err)
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ PV
	pvList, err := clientset.CoreV1().PersistentVolumes().List(context.TODO(), metav1.ListOptions{})
	if err != nil {
		log.Fatalf("Error listing PVs: %v", err)
	}

	// –ü–µ—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ PV
	for _, pv := range pvList.Items {
		findPv(pv)
	}

	findMatchesAndDifferences(subvolumeNames, pvFromKubeArr)

}

func findPv(pv v1.PersistentVolume) {
	capacity := pv.Spec.Capacity[v1.ResourceStorage]
	capacityStr := capacity.String()

	// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ PV –∏—Å–ø–æ–ª—å–∑—É–µ—Ç CSI –¥—Ä–∞–π–≤–µ—Ä
	if pv.Spec.CSI != nil {
		subvolumeName := pv.Spec.CSI.VolumeAttributes["subvolumeName"]

		if LOG_LEVEL == "DEBUG" {
			message := fmt.Sprintf("Find PV in k8s. Name: %s Capacity: %s Access Modes: %v SubvolumeName: %s", pv.Name, capacityStr, pv.Spec.AccessModes, subvolumeName)
			logWithTime(message)
		}

		pvFromKubeArr = append(pvFromKubeArr, subvolumeName)

	} else {

		message := fmt.Sprintf("Get PV from k8s. Name: %sCapacity: %sAccess Modes: %vNo CSI driver info available", pv.Name, capacityStr, pv.Spec.AccessModes)
		logWithTime(message)
	}

	if LOG_LEVEL == "DEBUG" {
		logWithTime(fmt.Sprintf("PersistentVolumes array: %+v", pvFromKubeArr))
	}

}

func findMatchesAndDifferences(list1, list2 []string) {
	matches := []string{}
	differences := []string{}
	seen := make(map[string]int)

	// –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ä—Ç—É, –æ—Ç–º–µ—á–∞—è —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –æ–±–æ–∏—Ö —Å–ø–∏—Å–∫–æ–≤
	for _, item := range list1 {
		seen[item]++
	}

	for _, item := range list2 {
		seen[item]--
	}

	// –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏ —Ä–∞–∑–ª–∏—á–∏—è
	for item, count := range seen {
		if count == 0 {
			matches = append(matches, item)
		} else {
			differences = append(differences, item)
		}
	}

	// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	logWithTime(fmt.Sprintf("üåΩMatches %v values: %+v", len(matches), matches))
	// logWithTime(fmt.Sprintf("ü¶êDifferences %v values: %+v", len(differences), differences))
}

func loadSubvolumeNamesFromFile(filePath string) error {
	// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
	file, err := os.Open(filePath)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: %v", err)
	}
	defer file.Close()

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–∫–∞–Ω–µ—Ä –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())
		if line != "" {
			// –£–¥–∞–ª—è–µ–º –∑–∞–ø—è—Ç—ã–µ –∏ –∫–∞–≤—ã—á–∫–∏
			line = strings.Trim(line, `",`)
			subvolumeNames = append(subvolumeNames, line)
		}
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
	if err := scanner.Err(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: %v", err)
	}

	return nil
}
